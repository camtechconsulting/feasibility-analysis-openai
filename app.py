from flask import Flask, request, jsonify
from flask_cors import CORS
from docx import Document
from datetime import datetime
from openai import OpenAI
import os

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

REPORT_FOLDER = os.path.join(app.root_path, 'static', 'reports')
os.makedirs(REPORT_FOLDER, exist_ok=True)

def extract_text(doc_file):
    doc = Document(doc_file)
    return "\n".join([para.text for para in doc.paragraphs if para.text.strip() != ""])

def generate_section(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-4-0125-preview",
            messages=[
                {"role": "system", "content": "You are a professional business consultant. Generate high-quality feasibility analysis reports based on client inputs."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        return response.choices[0].message.content
    except Exception as e:
        print("OpenAI API error:", e)
        return "Error generating this section."

@app.route('/')
def home():
    return "Feasibility AI Backend with GPT is Running!"

@app.route('/generate', methods=['POST'])
def generate_report():
    intake = request.files.get('intake_form')
    rubric = request.files.get('scoring_rubric')

    if not intake or not rubric:
        return jsonify({'error': 'Both files are required.'}), 400

    intake_text = extract_text(intake)
    rubric_text = extract_text(rubric)
    combined_context = f"Intake Form Content:\n{intake_text}\n\nScoring Rubric Content:\n{rubric_text}"

    doc = Document()
    doc.add_heading('Feasibility Analysis Report', 0)
    doc.add_paragraph(f"Generated by CamTech Consulting on {datetime.now().strftime('%B %d, %Y')}")

    sections = [
        ("Executive Summary", "Write a 500-word executive summary of this business idea based on the following inputs."),
        ("1. Market Opportunity Assessment", "Assess the market opportunity for this business in about 500 words."),
        ("2. Competitive Landscape Analysis", "Describe the competitive landscape in detail."),
        ("3. Operational Feasibility", "Evaluate how feasible it is to operate this business."),
        ("4. Financial Viability Check", "Estimate financial feasibility and potential challenges."),
        ("5. Risk Identification & Recommendations", "Identify risks and provide specific strategic recommendations."),
        ("Conclusion & Go/No-Go Recommendation", "Conclude with a go or no-go recommendation with justification.")
    ]

    for title, instruction in sections:
        doc.add_heading(title, level=1)
        content = generate_section(f"{instruction}\n\nBusiness Context:\n{combined_context}")
        doc.add_paragraph(content)

    filename = f"feasibility_report_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"
    file_path = os.path.join(REPORT_FOLDER, filename)
    doc.save(file_path)

    return jsonify({'download_url': f'/static/reports/{filename}'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
