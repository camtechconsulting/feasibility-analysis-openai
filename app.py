
from flask import Flask, request, jsonify
from flask_cors import CORS
from docx import Document
from datetime import datetime
import openai
import os
import re

app = Flask(__name__)
CORS(app)

openai.api_key = os.getenv("OPENAI_API_KEY")

REPORT_FOLDER = os.path.join(app.root_path, 'static', 'reports')
os.makedirs(REPORT_FOLDER, exist_ok=True)

def extract_text(doc_file):
    doc = Document(doc_file)
    return "\n".join([para.text for para in doc.paragraphs if para.text.strip() != ""])

def clean_markdown(text):
    text = re.sub(r'^#+\s*', '', text, flags=re.MULTILINE)
    text = text.replace('*', '')
    return text.strip()

def extract_table_data(text):
    table = []
    lines = text.strip().splitlines()
    for line in lines:
        if '|' in line:
            row = [cell.strip() for cell in line.split('|') if cell.strip()]
            if row:
                table.append(row)
    return table if len(table) >= 2 else None

def generate_section(prompt):
    try:
        print("Sending prompt to OpenAI...")
        response = openai.ChatCompletion.create(
            model="gpt-4-0125-preview",
            messages=[
                {"role": "system", "content": "You are a business consultant creating detailed feasibility reports."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )
        content = response['choices'][0]['message']['content']
        print("OpenAI responded.")
        return content
    except Exception as e:
        print("OpenAI API error:", e)
        return "Error generating this section."

@app.route('/')
def home():
    return "Feasibility AI Backend with GPT is Running!"

@app.route('/generate', methods=['POST'])
def generate_report():
    intake = request.files.get('intake_form')
    rubric = request.files.get('scoring_rubric')

    if not intake or not rubric:
        return jsonify({'error': 'Both files are required.'}), 400

    intake_text = extract_text(intake)
    rubric_text = extract_text(rubric)
    context = f"Intake Form Content:\n{intake_text}\n\nScoring Rubric Content:\n{rubric_text}"

    doc = Document()
    doc.add_heading('Feasibility Analysis Report', 0)
    doc.add_paragraph(f"Generated by CamTech Consulting on {datetime.now().strftime('%B %d, %Y')}")

    sections = [
        ("Executive Summary", "Write a 500-word executive summary for a feasibility report based on the following business concept."),
        ("Market Opportunity Assessment", "Write a detailed market opportunity analysis. Include trends, size, growth projections, and relevant demographics."),
        ("Competitive Landscape Analysis", "Analyze the competitive landscape. Mention key players, pricing differences, and unique value propositions."),
        ("Operational Feasibility", "Describe how operations would run day-to-day. Include staffing, logistics, tools, and processes."),
        ("Financial Viability Check", "Create a detailed financial projection. Include a markdown-style table showing estimated startup costs, projected revenues, monthly cash flow, and breakeven timeline."),
        ("Risk Identification & Recommendations", "Outline the risks involved. Provide mitigation strategies and strategic recommendations."),
        ("Conclusion & Go/No-Go Recommendation", "Conclude with a go or no-go decision and justify it based on the analysis.")
    ]

    for title, prompt in sections:
        doc.add_heading(title, level=1)
        full_prompt = f"{prompt}\n\nBusiness Context:\n{context}"
        gpt_response = generate_section(full_prompt)

        table_data = extract_table_data(gpt_response)
        if table_data:
            table = doc.add_table(rows=1, cols=len(table_data[0]))
            table.style = 'Table Grid'
            hdr_cells = table.rows[0].cells
            for i, val in enumerate(table_data[0]):
                hdr_cells[i].text = val
            for row_data in table_data[1:]:
                row_cells = table.add_row().cells
                for i, val in enumerate(row_data):
                    if i < len(row_cells):
                        row_cells[i].text = val
        else:
            cleaned = clean_markdown(gpt_response)
            doc.add_paragraph(cleaned)

    filename = f"feasibility_report_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"
    filepath = os.path.join(REPORT_FOLDER, filename)
    doc.save(filepath)

    return jsonify({'download_url': f'/static/reports/{filename}'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
